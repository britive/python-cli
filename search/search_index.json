{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PyBritive Note This is a BETA release. This codebase should not be used for production workloads. For full documentation visit docs.britive.com . PyBritive is intended to be used as a CLI application for communicating with the Britive Platform. Requirements Python 3.7 or higher Active Britive tenant (or nothing is really going to work) Installation pybritive will be installed via Python pip . The package is not available in PyPi at this time, so it will be installed via the published tar balls in the GitHub repo. Determine the most recent version that has been published and add the version below. version=x.y.z pip install https://github.com/britive/python-cli/releases/download/v$version/pybritive-$version.tar.gz The end user is free to install the CLI into a virtual environment or in the global scope, so it is available everywhere. Tenant Configuration Before pybritive can connect to a Britive tenant, it needs to know some details about that tenant. This is where pybritive configure will help us. There are 2 ways to tell pybritive about tenants. pybritive configure import : this will import an existing configuration from the Node.js version of the Britive CLI. pybritive configure tenant : This will prompt (or optionally the values can be passed via flags) for tenant details. An alias for a tenant can be created in case more than 1 tenant is configured for use. This may be the case for admins who may have access to an EA and GA tenant. Tenant Selection Logic There are numerous ways to provide the CLI with the Britive tenant that should be used. The below list is the order of operations for determining the tenant. The tenant excludes .britive-app.com . Just include the leftmost part. Example: example.britive-app.com will have a tenant name in the CLI of example . Value retrieved from CLI option/flag --tenant/-t Value retrieved from environment variable BRITIVE_TENANT Value retrieved from ~/.britive/pybritive.config global variable default_tenant If none of the above are available then check for configured tenants in ~/.britive/pybritive.config and if there is only 1 tenant configured use it If all the above fail then error Credential Selection Logic There are numerous ways to provide the CLI with the Britive credentials that should be used to authenticate to the Britive tenant. The below list is the order of operations for determining the tenant. Value retrieved from CLI option/flag --token/-T Value retrieved from environment variable BRITIVE_API_TOKEN If none of the above are available an interactive login will be performed and temporary credentials will be stored locally for future use with the CLI Credential Stores The CLI currently offers two ways in which temporary credentials obtained via interactive login can be stored. Future enhancements aim to offer other credential storage options. File Credentials will be stored in a plaintext file located at ~/.britive/pybritive.credentials Encrypted File (Default) Credentials will be stored in an encrypted file located at ~/.britive/pybritive.credentials.encrypted . The user will be prompted for a passphrase to use to encrypt the file. The user can also pass in the passphrase via flag --passphrase/-p or via environment variable PYBRITIVE_ENCRYPTED_CREDENTIAL_PASSPHRASE . If no passphrase is provided pybritive will use an internally generated passphrase unique to the machine on which the application is running. Home Directory By default, files that pybritive requires will be persisted to ~/.britive/ . This can be overwritten by specifying environment variable PYBRITIVE_HOME_DIR . This should be a path to where the end user wants to persist the .britive directory. Note that .britive will still be created so do not specify that as part of the path. Shell Completion TODO: Provide more automated scripts here to automatically add the required configs to the profiles. For now the below works just fine though. Behind the scenes the pybritive CLI tool uses the python click package. click offers shell completion for the following shells. Bash Zsh Fish A shell completion script has been written for the following shells as well. PowerShell In order to set up shell completion, follow these steps. Once complete either source your environment again or start a new shell in order for the changes to be loaded. Bash Save the completion script somewhere. _PYBRITIVE_COMPLETE=bash_source pybritive > ~/.pybritive-complete.bash Source the file in ~/.bashrc . source ~/.pybritive-complete.bash Zsh Save the completion script somewhere. _PYBRITIVE_COMPLETE=zsh_source pybritive > ~/.pybritive-complete.zsh Source the file in ~/.zshrc . source ~/.pybritive-complete.zsh Fish Save the completion script to the fish completions directory. _PYBRITIVE_COMPLETE=fish_source pybritive > ~/.config/fish/completions/pybritive.fish PowerShell Append the below code to your PowerShell profile. $pybritive_completion = { param($wordToComplete, $commandAst, $cursorPosition) # in case of scripts, this object holds the current line after string conversion $line = \"$commandAst\" # The behaviour of completion should depend on the trailing spaces in the current line: # * \"command subcommand \" --> TAB --> Completion items parameters/sub-subcommands of \"subcommand\" # * \"command subcom\" --> TAB --> Completion items to extend \"subcom\" into matching subcommands. # $line never contains the trailing spaces. However, $cursorPosition is the length of the original # line (with trailing spaces) in this case. This comparison allows the expected user experience. if ($cursorPosition -gt $line.Length) { $line = \"$line \" } # set environment variables that pybritive completion will use New-Item -Path Env: -Name COMP_LINE -Value $line | Out-Null # Current line New-Item -Path Env: -Name _PYBRITIVE_COMPLETE -Value \"powershell_complete\" | Out-Null # call pybritive and it will inspect env vars and provide completion results Invoke-Expression pybritive -ErrorAction SilentlyContinue | Tee-Object -Var completionResult | Out-Null # cleanup environment variables Remove-Item Env:\\COMP_LINE | Out-Null Remove-Item Env:\\_PYBRITIVE_COMPLETE | Out-Null # get list of completion items $items = $completionResult -split '\\r?\\n' $items | ForEach-Object {\"$_ \"} # trailing space important as completion is \"done\" } # register tab completion Register-ArgumentCompleter -Native -CommandName pybritive -ScriptBlock $pybritive_completion The location of your PowerShell profile can be found with command echo $profile And is generally something like C:\\Users\\{user}\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 . Create the file (and any needed directories) if needed. Shell Completion - Profiles - Local Cache By default, shell completion only completes commands and options/flags as those values are available without any authentication to a Britive tenant. There is an option to enable shell completion for profiles and profile aliases for use with checkout and checkin . In order enable this, run the following command. pybritive cache profiles This will locally cache profiles for which the authenticated user has permissions. If multiple tenants are being used then each tenant will need to be cached individually. All profiles across all tenants will be available during shell completion (this is due to the fact the completion logic doesn't have any context as to which tenant is being used as the tenant may not be provided yet). The cache will not be updated over time. In order to update the cache more regularly run the following command. Note that this config flag is NOT available directly via pybritive configure global ... . pybritive configure update global auto-refresh-profile-cache true To turn the feature off run pybritive configure update global auto-refresh-profile-cache false pybritive cache clear Command Documentation pybritive PyBritive CLI - Pure Python Implementation for a Britive CLI Usage: pybritive [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --version , -v boolean Prints the PyBritive CLI version and exits. None --help boolean Show this message and exit. False Subcommands cache : Manage local cache settings. checkin : Checkin a profile. checkout : Checkout a profile. configure : Configures the PyBritive CLI. login : Perform an interactive login to obtain temporary credentials. logout : Logout of an interactive login session. ls : List resources available for currently authenticated identity. secret : View or download a secret. user : Print details about the authenticated identity. pybritive cache Manage local cache settings. Usage: pybritive cache [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands clear : Clears the local cache. profiles : Cache profiles locally to facilitate auto-completion of profile names on checkin/checkout. pybritive cache clear Clears the local cache. Usage: pybritive cache clear [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False pybritive cache profiles Cache profiles locally to facilitate auto-completion of profile names on checkin/checkout. Usage: pybritive cache profiles [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive checkin Checkin a profile. This command takes 1 required argument PROFILE . This should be a string representation of the profile that should be checked in. Format is application name/environment name/profile name . Usage: pybritive checkin [OPTIONS] PROFILE Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive checkout Checkout a profile. This command takes 1 required argument PROFILE . This should be a string representation of the profile that should be checked out. Format is application name/environment name/profile name . Usage: pybritive checkout [OPTIONS] PROFILE Options: Name Type Description Default --alias , -a text Alias for the profile so future checkouts can use the alias instead of the profile details. None --blocktime , -b integer Seconds to wait before starting to poll for credentials. If not provided will default to 60 for profiles that require approval and 3 for profiles without approval. 3 --console , -c boolean Checkout the console access for the profile instead of programmatic access. False --justification , -j text Justification for the checkout approval process, if the profile checkout requires approval. None --mode , -m choice ( text | json | env | integrate | env-nix | env-wincmd | env-winps | awscredentialprocess | azlogin | azps | browser ) The way in which the checked out credentials are presented. integrate will place the credentials into the cloud providers local credential file (AWS only). Value env can optionally include terminal specific options for setting environment variables (example: env-nix for Linux/Mac, env-wincmd for Windows Command Prompt, env-winps for Windows PowerShell). json --maxpolltime , -p integer Maximum seconds to poll before exiting. 600 --silent , -s boolean Enable silent mode. False -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive configure Configures the PyBritive CLI. Usage: pybritive configure [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands global : Configures global level settings for the PyBritive CLI. import : Import an existing configuration from the Node.js/NPM version of the Britive CLI. tenant : Configures tenant level settings for the PyBritive CLI. update : Provides a mechanism to directly update any section/field/value in the config file. pybritive configure global Configures global level settings for the PyBritive CLI. If CLI options/flags are not provided an interactive data entry process will collect any needed data. Usage: pybritive configure global [OPTIONS] Options: Name Type Description Default --tenant , -t text The name of the tenant: [tenant].britive-app.com. None --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -P , --no-prompt boolean Do not prompt for any missing data. Used when programmatically running configure [tenant|global] . False --backend , -b choice ( file | encrypted-file ) The backend used to store temporary access tokens to authenticate against the Britive tenant. None --help boolean Show this message and exit. False pybritive configure import Import an existing configuration from the Node.js/NPM version of the Britive CLI. Usage: pybritive configure import [OPTIONS] Options: Name Type Description Default --silent , -s boolean Enable silent mode. False -T , --token text API token. None --help boolean Show this message and exit. False pybritive configure tenant Configures tenant level settings for the PyBritive CLI. If CLI options/flags are not provided an interactive data entry process will collect any needed data. Usage: pybritive configure tenant [OPTIONS] Options: Name Type Description Default --tenant , -t text The name of the tenant: [tenant].britive-app.com. None --alias , -a text Optional alias for the above tenant. This alias would be used with the --tenant flag. None --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -P , --no-prompt boolean Do not prompt for any missing data. Used when programmatically running configure [tenant|global] . False --help boolean Show this message and exit. False pybritive configure update Provides a mechanism to directly update any section/field/value in the config file. All arguments provided will be converted to lowercase before being persisted. SECTION : The config section (example: global, tenant-foo) FIELD : The field within the section (example: default_tenant, name, output_format) VALUE : The value of the field. Example: pybritive configure update global output_format json Usage: pybritive configure update [OPTIONS] SECTION FIELD VALUE Options: Name Type Description Default --silent , -s boolean Enable silent mode. False --help boolean Show this message and exit. False pybritive login Perform an interactive login to obtain temporary credentials. This only applies when an API token has not been specified via --token,-T or via environment variable BRITIVE_API_TOKEN . Usage: pybritive login [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive logout Logout of an interactive login session. This only applies when an API token has not been specified via --token,-T or via environment variable BRITIVE_API_TOKEN . Usage: pybritive logout [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive ls List resources available for currently authenticated identity. Usage: pybritive ls [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands applications : List applications for the currently authenticated identity. environments : List environments for the currently authenticated identity. profiles : List profiles for the currently authenticated identity. secrets : List secrets for the currently authenticated identity. pybritive ls applications List applications for the currently authenticated identity. Usage: pybritive ls applications [OPTIONS] Options: Name Type Description Default --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive ls environments List environments for the currently authenticated identity. Usage: pybritive ls environments [OPTIONS] Options: Name Type Description Default --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive ls profiles List profiles for the currently authenticated identity. Usage: pybritive ls profiles [OPTIONS] Options: Name Type Description Default --checked-out , -c boolean Filter profile list to currently checked out profiles. False --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive ls secrets List secrets for the currently authenticated identity. Usage: pybritive ls secrets [OPTIONS] Options: Name Type Description Default --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive secret View or download a secret. Usage: pybritive secret [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands download : Download the secret file. view : Display the secret value of the provided secret. pybritive secret download Download the secret file. This command takes 1 required argument PATH . This should be a string representation of the secret path. Ensure the leading / is provided. Usage: pybritive secret download [OPTIONS] PATH Options: Name Type Description Default --file , -F text Path to a file where the contents of the secret file will be stored. Omitting this option will result in the file being saved to the current directory with the name provided when the secret file was initially uploaded. Providing - will print the contents of the secret file to stdout. None --blocktime , -b integer Seconds to wait before starting to poll for credentials. If not provided will default to 60 for profiles that require approval and 3 for profiles without approval. 3 --justification , -j text Justification for the checkout approval process, if the profile checkout requires approval. None --maxpolltime , -p integer Maximum seconds to poll before exiting. 600 --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None --silent , -s boolean Enable silent mode. False -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive secret view Display the secret value of the provided secret. This command takes 1 required argument PATH . This should be a string representation of the secret path. Ensure the leading / is provided. Usage: pybritive secret view [OPTIONS] PATH Options: Name Type Description Default --blocktime , -b integer Seconds to wait before starting to poll for credentials. If not provided will default to 60 for profiles that require approval and 3 for profiles without approval. 3 --justification , -j text Justification for the checkout approval process, if the profile checkout requires approval. None --maxpolltime , -p integer Maximum seconds to poll before exiting. 600 --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False pybritive user Print details about the authenticated identity. Usage: pybritive user [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"Documentation"},{"location":"#welcome-to-pybritive","text":"Note This is a BETA release. This codebase should not be used for production workloads. For full documentation visit docs.britive.com . PyBritive is intended to be used as a CLI application for communicating with the Britive Platform.","title":"Welcome to PyBritive"},{"location":"#requirements","text":"Python 3.7 or higher Active Britive tenant (or nothing is really going to work)","title":"Requirements"},{"location":"#installation","text":"pybritive will be installed via Python pip . The package is not available in PyPi at this time, so it will be installed via the published tar balls in the GitHub repo. Determine the most recent version that has been published and add the version below. version=x.y.z pip install https://github.com/britive/python-cli/releases/download/v$version/pybritive-$version.tar.gz The end user is free to install the CLI into a virtual environment or in the global scope, so it is available everywhere.","title":"Installation"},{"location":"#tenant-configuration","text":"Before pybritive can connect to a Britive tenant, it needs to know some details about that tenant. This is where pybritive configure will help us. There are 2 ways to tell pybritive about tenants. pybritive configure import : this will import an existing configuration from the Node.js version of the Britive CLI. pybritive configure tenant : This will prompt (or optionally the values can be passed via flags) for tenant details. An alias for a tenant can be created in case more than 1 tenant is configured for use. This may be the case for admins who may have access to an EA and GA tenant.","title":"Tenant Configuration"},{"location":"#tenant-selection-logic","text":"There are numerous ways to provide the CLI with the Britive tenant that should be used. The below list is the order of operations for determining the tenant. The tenant excludes .britive-app.com . Just include the leftmost part. Example: example.britive-app.com will have a tenant name in the CLI of example . Value retrieved from CLI option/flag --tenant/-t Value retrieved from environment variable BRITIVE_TENANT Value retrieved from ~/.britive/pybritive.config global variable default_tenant If none of the above are available then check for configured tenants in ~/.britive/pybritive.config and if there is only 1 tenant configured use it If all the above fail then error","title":"Tenant Selection Logic"},{"location":"#credential-selection-logic","text":"There are numerous ways to provide the CLI with the Britive credentials that should be used to authenticate to the Britive tenant. The below list is the order of operations for determining the tenant. Value retrieved from CLI option/flag --token/-T Value retrieved from environment variable BRITIVE_API_TOKEN If none of the above are available an interactive login will be performed and temporary credentials will be stored locally for future use with the CLI","title":"Credential Selection Logic"},{"location":"#credential-stores","text":"The CLI currently offers two ways in which temporary credentials obtained via interactive login can be stored. Future enhancements aim to offer other credential storage options.","title":"Credential Stores"},{"location":"#file","text":"Credentials will be stored in a plaintext file located at ~/.britive/pybritive.credentials","title":"File"},{"location":"#encrypted-file-default","text":"Credentials will be stored in an encrypted file located at ~/.britive/pybritive.credentials.encrypted . The user will be prompted for a passphrase to use to encrypt the file. The user can also pass in the passphrase via flag --passphrase/-p or via environment variable PYBRITIVE_ENCRYPTED_CREDENTIAL_PASSPHRASE . If no passphrase is provided pybritive will use an internally generated passphrase unique to the machine on which the application is running.","title":"Encrypted File (Default)"},{"location":"#home-directory","text":"By default, files that pybritive requires will be persisted to ~/.britive/ . This can be overwritten by specifying environment variable PYBRITIVE_HOME_DIR . This should be a path to where the end user wants to persist the .britive directory. Note that .britive will still be created so do not specify that as part of the path.","title":"Home Directory"},{"location":"#shell-completion","text":"TODO: Provide more automated scripts here to automatically add the required configs to the profiles. For now the below works just fine though. Behind the scenes the pybritive CLI tool uses the python click package. click offers shell completion for the following shells. Bash Zsh Fish A shell completion script has been written for the following shells as well. PowerShell In order to set up shell completion, follow these steps. Once complete either source your environment again or start a new shell in order for the changes to be loaded.","title":"Shell Completion"},{"location":"#bash","text":"Save the completion script somewhere. _PYBRITIVE_COMPLETE=bash_source pybritive > ~/.pybritive-complete.bash Source the file in ~/.bashrc . source ~/.pybritive-complete.bash","title":"Bash"},{"location":"#zsh","text":"Save the completion script somewhere. _PYBRITIVE_COMPLETE=zsh_source pybritive > ~/.pybritive-complete.zsh Source the file in ~/.zshrc . source ~/.pybritive-complete.zsh","title":"Zsh"},{"location":"#fish","text":"Save the completion script to the fish completions directory. _PYBRITIVE_COMPLETE=fish_source pybritive > ~/.config/fish/completions/pybritive.fish","title":"Fish"},{"location":"#powershell","text":"Append the below code to your PowerShell profile. $pybritive_completion = { param($wordToComplete, $commandAst, $cursorPosition) # in case of scripts, this object holds the current line after string conversion $line = \"$commandAst\" # The behaviour of completion should depend on the trailing spaces in the current line: # * \"command subcommand \" --> TAB --> Completion items parameters/sub-subcommands of \"subcommand\" # * \"command subcom\" --> TAB --> Completion items to extend \"subcom\" into matching subcommands. # $line never contains the trailing spaces. However, $cursorPosition is the length of the original # line (with trailing spaces) in this case. This comparison allows the expected user experience. if ($cursorPosition -gt $line.Length) { $line = \"$line \" } # set environment variables that pybritive completion will use New-Item -Path Env: -Name COMP_LINE -Value $line | Out-Null # Current line New-Item -Path Env: -Name _PYBRITIVE_COMPLETE -Value \"powershell_complete\" | Out-Null # call pybritive and it will inspect env vars and provide completion results Invoke-Expression pybritive -ErrorAction SilentlyContinue | Tee-Object -Var completionResult | Out-Null # cleanup environment variables Remove-Item Env:\\COMP_LINE | Out-Null Remove-Item Env:\\_PYBRITIVE_COMPLETE | Out-Null # get list of completion items $items = $completionResult -split '\\r?\\n' $items | ForEach-Object {\"$_ \"} # trailing space important as completion is \"done\" } # register tab completion Register-ArgumentCompleter -Native -CommandName pybritive -ScriptBlock $pybritive_completion The location of your PowerShell profile can be found with command echo $profile And is generally something like C:\\Users\\{user}\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 . Create the file (and any needed directories) if needed.","title":"PowerShell"},{"location":"#shell-completion-profiles-local-cache","text":"By default, shell completion only completes commands and options/flags as those values are available without any authentication to a Britive tenant. There is an option to enable shell completion for profiles and profile aliases for use with checkout and checkin . In order enable this, run the following command. pybritive cache profiles This will locally cache profiles for which the authenticated user has permissions. If multiple tenants are being used then each tenant will need to be cached individually. All profiles across all tenants will be available during shell completion (this is due to the fact the completion logic doesn't have any context as to which tenant is being used as the tenant may not be provided yet). The cache will not be updated over time. In order to update the cache more regularly run the following command. Note that this config flag is NOT available directly via pybritive configure global ... . pybritive configure update global auto-refresh-profile-cache true To turn the feature off run pybritive configure update global auto-refresh-profile-cache false pybritive cache clear","title":"Shell Completion - Profiles - Local Cache"},{"location":"#command-documentation","text":"","title":"Command Documentation"},{"location":"#pybritive","text":"PyBritive CLI - Pure Python Implementation for a Britive CLI Usage: pybritive [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --version , -v boolean Prints the PyBritive CLI version and exits. None --help boolean Show this message and exit. False Subcommands cache : Manage local cache settings. checkin : Checkin a profile. checkout : Checkout a profile. configure : Configures the PyBritive CLI. login : Perform an interactive login to obtain temporary credentials. logout : Logout of an interactive login session. ls : List resources available for currently authenticated identity. secret : View or download a secret. user : Print details about the authenticated identity.","title":"pybritive"},{"location":"#pybritive-cache","text":"Manage local cache settings. Usage: pybritive cache [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands clear : Clears the local cache. profiles : Cache profiles locally to facilitate auto-completion of profile names on checkin/checkout.","title":"cache"},{"location":"#pybritive-cache-clear","text":"Clears the local cache. Usage: pybritive cache clear [OPTIONS] Options: Name Type Description Default --help boolean Show this message and exit. False","title":"clear"},{"location":"#pybritive-cache-profiles","text":"Cache profiles locally to facilitate auto-completion of profile names on checkin/checkout. Usage: pybritive cache profiles [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"profiles"},{"location":"#pybritive-checkin","text":"Checkin a profile. This command takes 1 required argument PROFILE . This should be a string representation of the profile that should be checked in. Format is application name/environment name/profile name . Usage: pybritive checkin [OPTIONS] PROFILE Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"checkin"},{"location":"#pybritive-checkout","text":"Checkout a profile. This command takes 1 required argument PROFILE . This should be a string representation of the profile that should be checked out. Format is application name/environment name/profile name . Usage: pybritive checkout [OPTIONS] PROFILE Options: Name Type Description Default --alias , -a text Alias for the profile so future checkouts can use the alias instead of the profile details. None --blocktime , -b integer Seconds to wait before starting to poll for credentials. If not provided will default to 60 for profiles that require approval and 3 for profiles without approval. 3 --console , -c boolean Checkout the console access for the profile instead of programmatic access. False --justification , -j text Justification for the checkout approval process, if the profile checkout requires approval. None --mode , -m choice ( text | json | env | integrate | env-nix | env-wincmd | env-winps | awscredentialprocess | azlogin | azps | browser ) The way in which the checked out credentials are presented. integrate will place the credentials into the cloud providers local credential file (AWS only). Value env can optionally include terminal specific options for setting environment variables (example: env-nix for Linux/Mac, env-wincmd for Windows Command Prompt, env-winps for Windows PowerShell). json --maxpolltime , -p integer Maximum seconds to poll before exiting. 600 --silent , -s boolean Enable silent mode. False -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"checkout"},{"location":"#pybritive-configure","text":"Configures the PyBritive CLI. Usage: pybritive configure [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands global : Configures global level settings for the PyBritive CLI. import : Import an existing configuration from the Node.js/NPM version of the Britive CLI. tenant : Configures tenant level settings for the PyBritive CLI. update : Provides a mechanism to directly update any section/field/value in the config file.","title":"configure"},{"location":"#pybritive-configure-global","text":"Configures global level settings for the PyBritive CLI. If CLI options/flags are not provided an interactive data entry process will collect any needed data. Usage: pybritive configure global [OPTIONS] Options: Name Type Description Default --tenant , -t text The name of the tenant: [tenant].britive-app.com. None --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -P , --no-prompt boolean Do not prompt for any missing data. Used when programmatically running configure [tenant|global] . False --backend , -b choice ( file | encrypted-file ) The backend used to store temporary access tokens to authenticate against the Britive tenant. None --help boolean Show this message and exit. False","title":"global"},{"location":"#pybritive-configure-import","text":"Import an existing configuration from the Node.js/NPM version of the Britive CLI. Usage: pybritive configure import [OPTIONS] Options: Name Type Description Default --silent , -s boolean Enable silent mode. False -T , --token text API token. None --help boolean Show this message and exit. False","title":"import"},{"location":"#pybritive-configure-tenant","text":"Configures tenant level settings for the PyBritive CLI. If CLI options/flags are not provided an interactive data entry process will collect any needed data. Usage: pybritive configure tenant [OPTIONS] Options: Name Type Description Default --tenant , -t text The name of the tenant: [tenant].britive-app.com. None --alias , -a text Optional alias for the above tenant. This alias would be used with the --tenant flag. None --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -P , --no-prompt boolean Do not prompt for any missing data. Used when programmatically running configure [tenant|global] . False --help boolean Show this message and exit. False","title":"tenant"},{"location":"#pybritive-configure-update","text":"Provides a mechanism to directly update any section/field/value in the config file. All arguments provided will be converted to lowercase before being persisted. SECTION : The config section (example: global, tenant-foo) FIELD : The field within the section (example: default_tenant, name, output_format) VALUE : The value of the field. Example: pybritive configure update global output_format json Usage: pybritive configure update [OPTIONS] SECTION FIELD VALUE Options: Name Type Description Default --silent , -s boolean Enable silent mode. False --help boolean Show this message and exit. False","title":"update"},{"location":"#pybritive-login","text":"Perform an interactive login to obtain temporary credentials. This only applies when an API token has not been specified via --token,-T or via environment variable BRITIVE_API_TOKEN . Usage: pybritive login [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"login"},{"location":"#pybritive-logout","text":"Logout of an interactive login session. This only applies when an API token has not been specified via --token,-T or via environment variable BRITIVE_API_TOKEN . Usage: pybritive logout [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"logout"},{"location":"#pybritive-ls","text":"List resources available for currently authenticated identity. Usage: pybritive ls [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands applications : List applications for the currently authenticated identity. environments : List environments for the currently authenticated identity. profiles : List profiles for the currently authenticated identity. secrets : List secrets for the currently authenticated identity.","title":"ls"},{"location":"#pybritive-ls-applications","text":"List applications for the currently authenticated identity. Usage: pybritive ls applications [OPTIONS] Options: Name Type Description Default --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"applications"},{"location":"#pybritive-ls-environments","text":"List environments for the currently authenticated identity. Usage: pybritive ls environments [OPTIONS] Options: Name Type Description Default --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"environments"},{"location":"#pybritive-ls-profiles","text":"List profiles for the currently authenticated identity. Usage: pybritive ls profiles [OPTIONS] Options: Name Type Description Default --checked-out , -c boolean Filter profile list to currently checked out profiles. False --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"profiles"},{"location":"#pybritive-ls-secrets","text":"List secrets for the currently authenticated identity. Usage: pybritive ls secrets [OPTIONS] Options: Name Type Description Default --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"secrets"},{"location":"#pybritive-secret","text":"View or download a secret. Usage: pybritive secret [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --help boolean Show this message and exit. False Subcommands download : Download the secret file. view : Display the secret value of the provided secret.","title":"secret"},{"location":"#pybritive-secret-download","text":"Download the secret file. This command takes 1 required argument PATH . This should be a string representation of the secret path. Ensure the leading / is provided. Usage: pybritive secret download [OPTIONS] PATH Options: Name Type Description Default --file , -F text Path to a file where the contents of the secret file will be stored. Omitting this option will result in the file being saved to the current directory with the name provided when the secret file was initially uploaded. Providing - will print the contents of the secret file to stdout. None --blocktime , -b integer Seconds to wait before starting to poll for credentials. If not provided will default to 60 for profiles that require approval and 3 for profiles without approval. 3 --justification , -j text Justification for the checkout approval process, if the profile checkout requires approval. None --maxpolltime , -p integer Maximum seconds to poll before exiting. 600 --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None --silent , -s boolean Enable silent mode. False -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"download"},{"location":"#pybritive-secret-view","text":"Display the secret value of the provided secret. This command takes 1 required argument PATH . This should be a string representation of the secret path. Ensure the leading / is provided. Usage: pybritive secret view [OPTIONS] PATH Options: Name Type Description Default --blocktime , -b integer Seconds to wait before starting to poll for credentials. If not provided will default to 60 for profiles that require approval and 3 for profiles without approval. 3 --justification , -j text Justification for the checkout approval process, if the profile checkout requires approval. None --maxpolltime , -p integer Maximum seconds to poll before exiting. 600 --format , -f choice ( json | yaml | csv | table | list | table-plain | table-simple | table-github | table-grid | table-simple_grid | table-rounded_grid | table-double_grid | table-fancy_grid | table-outline | table-simple_outline | table-rounded_outline | table-double_outline | table-fancy_outline | table-pipe | table-orgtbl | table-jira | table-presto | table-pretty | table-psql | table-rst | table-mediawiki | table-moinmoin | table-youtrack | table-html | table-unsafehtml | table-latex | table-latex_raw | table-latex_booktabs | table-latex_longtable | table-textile | table-tsv ) Display output format. Valid values are (json, yaml, csv, table[-format]). If table is used an optional table format can be specified as table-format . Valid table formats can be found here: https://github.com/astanin/python-tabulate#table_format. Example: table-pretty . None -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"view"},{"location":"#pybritive-user","text":"Print details about the authenticated identity. Usage: pybritive user [OPTIONS] Options: Name Type Description Default -t , --tenant text Name of tenant. None -T , --token text API token. None --passphrase , -p text The passphrase to use for encrypting credentials. None --help boolean Show this message and exit. False","title":"user"}]}